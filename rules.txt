
running 1 test
Value: (Const -1 )
Value: (Const 0 )
Value: (Const 1 )
Predicate: (Neq (Const -1 ) (Const -1 ) )
Predicate: (Neq (Const -1 ) (Const 0 ) )
Predicate: (Neq (Const -1 ) (Const 1 ) )
Predicate: (Neq (Const -1 ) (Var a ) )
Predicate: (Neq (Const -1 ) (Var b ) )
Predicate: (Neq (Const -1 ) (Var c ) )
Predicate: (Neq (Const -1 ) (Var d ) )
Predicate: (Neq (Const 0 ) (Const -1 ) )
Predicate: (Neq (Const 0 ) (Const 0 ) )
Predicate: (Neq (Const 0 ) (Const 1 ) )
Predicate: (Neq (Const 0 ) (Var a ) )
Predicate: (Neq (Const 0 ) (Var b ) )
Predicate: (Neq (Const 0 ) (Var c ) )
Predicate: (Neq (Const 0 ) (Var d ) )
Predicate: (Neq (Const 1 ) (Const -1 ) )
Predicate: (Neq (Const 1 ) (Const 0 ) )
Predicate: (Neq (Const 1 ) (Const 1 ) )
Predicate: (Neq (Const 1 ) (Var a ) )
Predicate: (Neq (Const 1 ) (Var b ) )
Predicate: (Neq (Const 1 ) (Var c ) )
Predicate: (Neq (Const 1 ) (Var d ) )
Predicate: (Neq (Var a ) (Const -1 ) )
Predicate: (Neq (Var a ) (Const 0 ) )
Predicate: (Neq (Var a ) (Const 1 ) )
Predicate: (Neq (Var a ) (Var a ) )
Predicate: (Neq (Var a ) (Var b ) )
Predicate: (Neq (Var a ) (Var c ) )
Predicate: (Neq (Var a ) (Var d ) )
Predicate: (Neq (Var b ) (Const -1 ) )
Predicate: (Neq (Var b ) (Const 0 ) )
Predicate: (Neq (Var b ) (Const 1 ) )
Predicate: (Neq (Var b ) (Var a ) )
Predicate: (Neq (Var b ) (Var b ) )
Predicate: (Neq (Var b ) (Var c ) )
Predicate: (Neq (Var b ) (Var d ) )
Predicate: (Neq (Var c ) (Const -1 ) )
Predicate: (Neq (Var c ) (Const 0 ) )
Predicate: (Neq (Var c ) (Const 1 ) )
Predicate: (Neq (Var c ) (Var a ) )
Predicate: (Neq (Var c ) (Var b ) )
Predicate: (Neq (Var c ) (Var c ) )
Predicate: (Neq (Var c ) (Var d ) )
Predicate: (Neq (Var d ) (Const -1 ) )
Predicate: (Neq (Var d ) (Const 0 ) )
Predicate: (Neq (Var d ) (Const 1 ) )
Predicate: (Neq (Var d ) (Var a ) )
Predicate: (Neq (Var d ) (Var b ) )
Predicate: (Neq (Var d ) (Var c ) )
Predicate: (Neq (Var d ) (Var d ) )
Predicate: (Gt (Const -1 ) (Const -1 ) )
Predicate: (Gt (Const -1 ) (Const 0 ) )
Predicate: (Gt (Const -1 ) (Const 1 ) )
Predicate: (Gt (Const -1 ) (Var a ) )
Predicate: (Gt (Const -1 ) (Var b ) )
Predicate: (Gt (Const -1 ) (Var c ) )
Predicate: (Gt (Const -1 ) (Var d ) )
Predicate: (Gt (Const 0 ) (Const -1 ) )
Predicate: (Gt (Const 0 ) (Const 0 ) )
Predicate: (Gt (Const 0 ) (Const 1 ) )
Predicate: (Gt (Const 0 ) (Var a ) )
Predicate: (Gt (Const 0 ) (Var b ) )
Predicate: (Gt (Const 0 ) (Var c ) )
Predicate: (Gt (Const 0 ) (Var d ) )
Predicate: (Gt (Const 1 ) (Const -1 ) )
Predicate: (Gt (Const 1 ) (Const 0 ) )
Predicate: (Gt (Const 1 ) (Const 1 ) )
Predicate: (Gt (Const 1 ) (Var a ) )
Predicate: (Gt (Const 1 ) (Var b ) )
Predicate: (Gt (Const 1 ) (Var c ) )
Predicate: (Gt (Const 1 ) (Var d ) )
Predicate: (Gt (Var a ) (Const -1 ) )
Predicate: (Gt (Var a ) (Const 0 ) )
Predicate: (Gt (Var a ) (Const 1 ) )
Predicate: (Gt (Var a ) (Var a ) )
Predicate: (Gt (Var a ) (Var b ) )
Predicate: (Gt (Var a ) (Var c ) )
Predicate: (Gt (Var a ) (Var d ) )
Predicate: (Gt (Var b ) (Const -1 ) )
Predicate: (Gt (Var b ) (Const 0 ) )
Predicate: (Gt (Var b ) (Const 1 ) )
Predicate: (Gt (Var b ) (Var a ) )
Predicate: (Gt (Var b ) (Var b ) )
Predicate: (Gt (Var b ) (Var c ) )
Predicate: (Gt (Var b ) (Var d ) )
Predicate: (Gt (Var c ) (Const -1 ) )
Predicate: (Gt (Var c ) (Const 0 ) )
Predicate: (Gt (Var c ) (Const 1 ) )
Predicate: (Gt (Var c ) (Var a ) )
Predicate: (Gt (Var c ) (Var b ) )
Predicate: (Gt (Var c ) (Var c ) )
Predicate: (Gt (Var c ) (Var d ) )
Predicate: (Gt (Var d ) (Const -1 ) )
Predicate: (Gt (Var d ) (Const 0 ) )
Predicate: (Gt (Var d ) (Const 1 ) )
Predicate: (Gt (Var d ) (Var a ) )
Predicate: (Gt (Var d ) (Var b ) )
Predicate: (Gt (Var d ) (Var c ) )
Predicate: (Gt (Var d ) (Var d ) )
size: 1
workload len: 7
running rewrites...
i'm done running rewrites
size: 2
workload len: 7
running rewrites...
i'm done running rewrites
size: 3
workload len: 21
running rewrites...
i'm done running rewrites
rule: if (Gt (Const -1 ) ?a ) then (Neg ?a ) ~> (Abs ?a )
rule: if (Gt ?a (Const -1 ) ) then (Abs ?a ) ~> ?a
running rewrites...
i'm done running rewrites
size: 4
workload len: 35
running rewrites...
i'm done running rewrites
rule: if (Gt ?a (Const -1 ) ) then (Neg (Neg ?a ) ) ~> (Abs (Abs ?a ) )
rule: if (Gt (Const -1 ) ?a ) then (Neg (Neg ?a ) ) ~> (Neg (Abs ?a ) )
rule: if (Gt (Const -1 ) ?a ) then (Neg (Abs ?a ) ) ~> ?a
rule: if (Gt ?a (Const -1 ) ) then (Neg (Abs ?a ) ) ~> (Neg ?a )
rule: if (Gt ?a (Const -1 ) ) then (Abs (Neg ?a ) ) ~> ?a
running rewrites...
i'm done running rewrites
size: 5
workload len: 357
running rewrites...
i'm done running rewrites
rule: (Sub ?a (Const 1 ) ) ~> (Add (Const -1 ) ?a )
rule: (Add ?a (Const -1 ) ) ~> (Sub ?a (Const 1 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: (Neq ?a ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt ?a (Const -1 ) ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt ?a (Const -1 ) ) then (Gt (Const 0 ) ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt ?a (Const 0 ) ) then (Gt (Const 1 ) ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: (Sub ?a ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: (Gt ?a ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt ?a (Const -1 ) ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: (Mul (Const 0 ) ?a ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt ?a (Const 0 ) ) ~> (Neq (Const 1 ) (Const 1 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Div (Const 0 ) (Const -1 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Add (Const 0 ) (Const 0 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Div (Const 0 ) (Const 1 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Add (Const -1 ) (Const 1 ) )
rule: (Mul ?a (Const 0 ) ) ~> (Const 0 )
rule: (Div ?a (Const -1 ) ) ~> (Neg ?a )
rule: (Div ?a (Const -1 ) ) ~> (Sub (Const 0 ) ?a )
rule: (Mul (Const -1 ) ?a ) ~> (Div ?a (Const -1 ) )
rule: (Neq ?a ?a ) ~> (Add (Const 0 ) (Const 0 ) )
rule: (Neq ?a ?a ) ~> (Div (Const 0 ) (Const 1 ) )
rule: (Neq ?a ?a ) ~> (Add (Const -1 ) (Const 1 ) )
rule: (Neq ?a ?a ) ~> (Const 0 )
rule: (Neg ?a ) ~> (Sub (Const 0 ) ?a )
rule: if (Gt (Const -1 ) ?a ) then (Sub (Const 0 ) ?a ) ~> (Abs (Abs ?a ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Div (Const -1 ) (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq ?a (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Const 1 )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 0 ) (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 1 ) (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Div ?a ?a )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Mul (Const 1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq ?a (Const 0 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt (Const -1 ) ?a ) ~> (Div (Const 1 ) ?a )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const -1 ) (Const 0 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Gt (Const 0 ) (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Add (Const 1 ) (Const 0 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Gt (Const 1 ) (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 1 ) (Const 0 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Div (Const 1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const -1 ) ?a )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 0 ) ?a )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 1 ) ?a )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq ?a (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Add (Const 0 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const -1 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Sub (Const 1 ) (Const 0 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Abs (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Neq (Const 0 ) (Const 1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Gt (Const -1 ) ?a ) ~> (Gt (Const 1 ) (Const 0 ) )
rule: if (Gt (Const -1 ) ?a ) then (Abs (Abs (Neg ?a ) ) ) ~> (Mul ?a (Const -1 ) )
rule: if (Gt (Const -1 ) ?a ) then (Mul (Const 1 ) ?a ) ~> (Neg (Abs (Abs ?a ) ) )
rule: (Mul (Const 1 ) ?a ) ~> (Add (Const 0 ) ?a )
rule: (Mul (Const 1 ) ?a ) ~> (Sub ?a (Const 0 ) )
rule: (Add ?a ?b ) ~> (Add ?b ?a )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Div (Const -1 ) (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const -1 ) ?a )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq ?a (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const 0 ) ?a )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Const 1 )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const 0 ) (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const 1 ) (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Mul (Const 1 ) (Const 1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq ?a (Const 0 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const -1 ) (Const 0 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Gt (Const 0 ) (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Gt (Const 1 ) (Const -1 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Neq (Const 1 ) (Const 0 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Div (Const 1 ) (Const 1 ) )
rule: if (Neq (Const 1 ) ?a ) then (Gt ?a (Const 1 ) ) ~> (Gt ?a (Const 0 ) )
rule: if (Gt ?a (Const 1 ) ) then (Gt ?a (Const 1 ) ) ~> (Div ?a ?a )
test math::tests::check_math_rules ... FAILED

failures:

failures:
    math::tests::check_math_rules

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 11.80s

writing flamegraph to "flamegraph.svg"
